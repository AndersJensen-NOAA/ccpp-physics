/**
\page GSD_MYNNEDMF GSD MYNN-EDMF Boundary Layer and Shallow Cloud Scheme
\section mynnedmf_descrip  Description

The Mellor-Yamada-Nakanishi-Niino (Nakanishi and Niino 2009 \cite NAKANISHI_2009) eddy
diffusivity-mass flux (EDMF) scheme was implemented into CCPP to introduce an alternative
turbulent kinetic energy (TKE)-based planetary boundary layer (PBL) scheme which could 
serve as a candidate PBL parameterization for the next-generation unified forecast system.
The MYNN-EDMF is currently emplyed in NOAA's operational Rapid Refresh (RAP; Benjamin et al.2016 \cite Benjamin_2016)
and High-Resolution Rapid Refresh (HRRR) forecast systems.

The original MYNN scheme was demonstrated to be an improvement over predecessor Mellor-Yamada-type 
PBL schemes (e.g., Mellor and Yamada 1974,1982 \cite Mellor_1974 \cite Mellor_1982) when compared against large-eddy
simulation (LES) of a convective PBL (Nakanishi and Niino 2004, 2009 \cite Nakanishi_2004 \cite NAKANISHI_2009), the
prediction of advection fog (Nakanishi and Niino 2006 \cite Nakanishi_2006), and for the representation of coastal 
barrier jets (Olson and Brown 2009 \cite olson_and_brown_2009). The MYNN scheme can be configured to function at either
level 2.5 or 3.0 closure and includes a partial-condensation scheme (also known as a cloud PDF or a statistical-cloud
scheme) to represent the effects of subgrid-scale(SGS) clouds on the buoyancy flux (Nakanishi and Niino 2004, 2006, and 2009
\cite Nakanishi_2004 \cite Nakanishi_2006 \cite NAKANISHI_2009). The closure constants for the original MYNN scheme 
were tuned to a database of LES as opposed to observational data.

The MYNN-EDMF scheme has been extensively developed to improve upon the forecast skill of the original MYNN,
largely driven by requirements to improve forecast skill in support of the NOAA's National Weather Service (NWS),
the Federal Aviation Administration (FAA) and users within the renewable-energy industry.Specifically, fundamental
changes were made to the formulation of the mixing lengths and representation of SGS clouds, but new components have also
been added to improve to representation of non-local mixing, the turbulence interaction with clouds, and the coupling to other 
model components (i.e., radiation). A description of the changes to the MYNN scheme are described in Olson et al.(2019) 
\cite olson_et_al_2019.


\section intra_mynnpbl Intraphysics Communication
\ref arg_table_mynnedmf_wrapper_run

\section gen_mynnedmf_conv GSD MYNN-EDMF Scheme  General Algorithm
Within the MYNN-EDMF, there is a dependecy check for the first time step. If true.
a three-dimensional initialization loop is entered. within this loop, several arrays
are initialized in three subroutines below:
- get_pblh(): calculates the hybrid \f$\theta_{vli}-TKE\f$ PBL height
- scale_aware(): calculates the similarity functions, \f$P_{\sigma-PBL}\f$ and \f$P_{\sigma-shcu}\f$,
  to control the scale-adaptive behavior for the local and nonlocal components, respectively
- mym_initialize(): initializes the mixing length, TKE, \f$\theta^{'2}\f$,\f$q^{'2}\f$, and \f$\theta^{'}q^{'}\f$.
These variables are calculated after obtaining prerequisite variables by calling the following subroutines from 
within mym_initialize():
  - mym_level2(): caluclates the level 2, non-dimensional wind shear \f$G_{M}\f$ and vertical temperature
gradient \f$G_{H}\f$ as well as the level 2 stability functions \f$S_{h}\f$ and \f$S_{m}\f$
  - mym_length(): calculates the mixing lengths

After initializing all required variables, the regular procedures performed at every time step are ready
for execution. The main subroutine mynn_bl_driver() encompasses the majority of the subroutines that comprise
the procedures that ultimately solve for tendencies of \f$U\f$, \f$V\f$, \f$\theta\f$, \f$q_v\f$, \f$q_c\f$,
and \f$q_i\f$. Figure 1 shows the full order of procedure/subroutines called within mynn_bl_driver().

\image html  MYNN-EDMF_call_order.png "Figure.The order of subroutines within the MYNN-EDMF. The green rectangles within the main subroutine (mynn_bl_driver()) represent subroutine calls. The blue rectangles represent tasks coded within the main driver. A brief description is shown on the right " width=10cm
\ref gen_mynn_bl_driver

*/
